~~~ THE MAIN EVENT! ~~~
@set player =
  "x" 8
  "y" 8
  "dx" 1
  "dy" 0
@set white = "æøå"

@export "init" init
  setDisplayMode 1 displayWidth displayHeight
  setStepInterval 64
  focusInput 3

@export "step" step t
  @set gameX = getGameAxisX
  @set gameY = getGameAxisY
  @if gameX > 0.5
    @set player "dx" = 1
    @set player "dy" = 0
  @if gameX < -0.5
    @set player "dx" = -1
    @set player "dy" = 0
  @if gameY > 0.5
    @set player "dx" = 0
    @set player "dy" = 1
  @if gameY < -0.5
    @set player "dx" = 0
    @set player "dy" = -1
  @set player "x" += player "dx"
  @set player "y" += player "dy"
  pset (player "x") (player "y") white
  ~ log2Numbers (player "x") (player "y")

@export "display" render t
  displayMemory




~~~ some boring setup ~~~
@export_memory "memory"
@import "env" "pushFromMemory" _pushFromMemory 2 0
@import "env" "popToMemory" _popToMemory 1 0
@import "env" "getBufferSize" _getBufferSize 0 1
@import "env" "log" _log 0 0
@import "env" "logNumber" log1Number 1 0
@import "env" "logNumber" log2Numbers 2 0
@import "env" "logNumber" log6Numbers 6 0
@import "env" "setDisplayMode" setDisplayMode 3 0
@import "env" "print" _print 0 0
@import "env" "displayMemory" _displayMemory 2 0
@import "env" "startTone" startTone 2 0
@import "env" "stopTone" stopTone 1 0
@import "env" "focusInput" focusInput 1 0
@import "env" "getGameAxisX" getGameAxisX 0 1
@import "env" "getGameAxisY" getGameAxisY 0 1
@import "env" "getGameButtonA" getGameButtonA 0 1
@import "env" "getGameButtonB" getGameButtonB 0 1
@import "env" "getGameButtonX" getGameButtonX 0 1
@import "env" "getGameButtonY" getGameButtonY 0 1
@import "env" "setStepInterval" setStepInterval 1 0


@func pushFromMemory str
  _pushFromMemory (address_of str) (size_of str)

@func popToMemory
  @set len = _getBufferSize
  @set str = ""
  write8 str (len-1) 0
  _popToMemory (address_of str)
  @return str


@func log message
  pushFromMemory message
  _log

@func print str
  pushFromMemory str
  _print

@set displayWidth = 64
@set displayHeight = 64
@set display = @binary
write8 display (4*displayWidth*displayHeight)-1 0

@func displayMemory
  _displayMemory (address_of display) (size_of display)

@func pset x y c
  @set index = 4 * (y * displayWidth + x)
  @if index >= 0 &&  index < ( size_of display )
    write32 display index c
    




